#!/usr/bin/env ruby

# Command line client for scalariver
# Takes a file name, issues an HTTP request to the server
# and prints the formatted scala source to stdout
# Usage: scalariver path/to/File.scala

require 'net/https'
require 'uri'
require 'optparse'

# To use your own scalariver instance, add this to your .bashrc or .zshrc:
# export SCALARIVER_URL="http://localhost:8098"
# or pass it as an option:
# scalariver --url=http://localhost:8098
DEFAULT_URL = "http://river.scalex.org"

def http_connection(uri)
  env = ENV['http_proxy'] || ENV['HTTP_PROXY']
  connection = if env
                 proxy = URI(env)
                 Net::HTTP::Proxy(proxy.host, proxy.port).new(uri.host, uri.port)
               else
                 Net::HTTP.new(uri.host, uri.port)
               end
  if uri.scheme == "https"
    connection.use_ssl = true
    connection.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end
  connection.open_timeout = 5
  connection.read_timeout = 5
  connection
end

def http(url, request)
  request['User-Agent'] = "Scalariver CLI"
  http_connection(url).start do |http|
    http.request request
  end
rescue Timeout::Error
  raise "Could not connect to #{url}"
end

options = {}
options['url'] = ENV["SCALARIVER_URL"] || DEFAULT_URL
booleanPreferences = [ 'alignParameters', 'rewriteArrowSymbols', 'alignParameters', 'alignSingleLineCaseStatements', 'compactControlReadability', 'compactStringConcatenation', 'doubleIndentClassDeclaration', 'formatXml', 'indentLocalDefs', 'indentPackageBlocks', 'indentWithTabs', 'multilineScaladocCommentsStartOnFirstLine', 'placeScaladocAsterisksBeneathSecondAsterisk', 'preserveDanglingCloseParenthesis', 'preserveSpaceBeforeArguments', 'rewriteArrowSymbols', 'spaceBeforeColon', 'spaceInsideBrackets', 'spaceInsideParentheses', 'spacesWithinPatternBinders', 'spacesAroundMultiImports']
booleanPreferences.each do |o|
  [['+', true], ['-', false]].each do |arr|
    if ARGV.delete(arr[0] + o) != nil
      options[o] = arr[1]
    end
  end
end
opts = OptionParser.new do |o|
  o.on("--url=URL", "Alternative server url (default: #{DEFAULT_URL})") do |url|
    options['url'] = url
  end
  [
    [nil, 'stdin', "Read Scala source from standard input"],
    [nil, 'stdout', "Write the formatted output to standard output"],
    ['f', 'forceOutput', "If using --stdout, print the source unchanged if it cannot be parsed correctly."],
    ['q', 'quiet', "Work quietly"],
    ['h', 'help', "Show help"]
  ].each do |arr|
    o.on(arr[0] == nil ? nil : '-' + arr[0], "--#{arr[1]}", arr[2]) do
      options[arr[1]] = true
    end
  end
  o.on("--indentSpaces=SPACES", "Set Number of spaces to use for indentation") do |spaces|
    options['indentSpaces'] = spaces
  end
  o.on("--danglingCloseParenthesis=(Prevent|Force|Preserve)", "If Force, any closing parentheses will be set to dangle") do |mode|
    options['danglingCloseParenthesis'] = mode
  end
end

begin
  opts.parse!
rescue OptionParser::InvalidOption => e
  puts "Error: #{e.message}"
  options['help'] = true
end

if options['help']
  puts <<-EOS
#{opts}
Examples:
  scalariver +spaceBeforeColon -alignParameters -indentSpaces=2 foo.scala
  echo 'class A ( n  :Int )' | scalariver --stdin --stdout -f
  EOS
  exit
end

if options['stdin']
  source = STDIN.read
else
  if ARGV.empty?
    puts "Error: Must specify a file or use --stdin (run with --help for full options)"
    exit 1
  else
    source_file = File.expand_path(ARGV[0])
    source = File.read(source_file)
  end
end

request = Net::HTTP::Post.new("/")
params = options
params['source'] = source
request.set_form_data(params)
response = http(URI(options['url']), request)
case response.code
when "200"
  print response.body if options['stdout']
  if !options['stdin'] and !options['stdout'] and source != response.body
    File.open(source_file, 'w') do |f|
      f.write response.body
    end
    print "Reformated #{source_file}" if !options['quiet']
  end
else
  print source if options['stdout'] and options['forceOutput']
  $stderr.puts response.body if $stdin.tty?
end
